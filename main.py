import time
import numpy as np
import librosa
import tensorflow as tf
import sounddevice as sd
import queue
import tkinter as tk
from tkinter import filedialog, messagebox
from threading import Thread


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∂–∞–Ω—Ä—ñ–≤
def load_genre_dict(file_path):
    with open(file_path, 'r') as f:
        genres = f.read().splitlines()
    return {i: genre for i, genre in enumerate(genres)}


# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞—É–¥—ñ–æ
SR = 22050
DURATION = 5
FRAME_LENGTH = SR * DURATION
MFCC_NUM = 64
MAX_PAD_LEN = 862

# –ß–µ—Ä–≥–∞ –¥–ª—è –∞—É–¥—ñ–æ
audio_queue = queue.Queue()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∂–∞–Ω—Ä—ñ–≤ —ñ –º–æ–¥–µ–ª—ñ
genre_dict = load_genre_dict('genres/genres.txt')
model = tf.keras.models.load_model('model.keras')


def extract_features(audio, sr=SR):
    try:
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∞—É–¥—ñ–æ –æ–¥–Ω–æ–≤–∏–º—ñ—Ä–Ω–∏–π
        if len(audio.shape) > 1:
            audio = audio.flatten()

        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∞—É–¥—ñ–æ
        audio = librosa.util.normalize(audio)

        # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è MFCC
        n_fft = 2048  # –ó–±—ñ–ª—å—à–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞
        hop_length = 512  # –ó–±—ñ–ª—å—à–µ–Ω–æ hop_length
        n_mels = 128  # –ó–±—ñ–ª—å—à–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å MEL-—Ñ—ñ–ª—å—Ç—Ä—ñ–≤

        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è MFCC –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mfccs = librosa.feature.mfcc(
            y=audio,
            sr=sr,
            n_mfcc=MFCC_NUM,
            n_fft=n_fft,
            hop_length=hop_length,
            n_mels=n_mels,
            fmin=20,
            fmax=sr / 2.0  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–ª–æ–≤–∏–Ω—É —á–∞—Å—Ç–æ—Ç–∏ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó —è–∫ fmax
        )

        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è MFCC
        mfccs = librosa.util.normalize(mfccs)

        # –û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ
        if mfccs.shape[1] < MAX_PAD_LEN:
            pad_width = MAX_PAD_LEN - mfccs.shape[1]
            mfccs = np.pad(mfccs, pad_width=((0, 0), (0, pad_width)), mode='constant')
        else:
            mfccs = mfccs[:, :MAX_PAD_LEN]

        return mfccs

    except Exception as e:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: {str(e)}")
        return None


# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –∂–∞–Ω—Ä—É
def predict_genre(audio):
    features = extract_features(audio)
    if features is None:
        return

    features = features.reshape(1, MFCC_NUM, MAX_PAD_LEN, 1)
    predictions = model.predict(features)
    predicted_genre_idx = np.argmax(predictions)
    predicted_genre = genre_dict[predicted_genre_idx]

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
    confidence = float(predictions[0][predicted_genre_idx]) * 100

    genre_label.config(text=f"üé∂ –ñ–∞–Ω—Ä: {predicted_genre}\n–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.1f}%")


# –í–∏–±—ñ—Ä —Ñ–∞–π–ª—É —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –∂–∞–Ω—Ä—É
def choose_file():
    file_path = filedialog.askopenfilename(filetypes=[("Audio Files", "*.wav *.mp3 *.flac")])
    if file_path:
        try:
            genre_label.config(text="‚è≥ –û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ...")
            root.update()
            audio, sr = librosa.load(file_path, sr=SR, mono=True)
            predict_genre(audio)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª: {str(e)}")
            genre_label.config(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É")


def callback(indata, frames, time, status):
    if status:
        print(status)
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ float32 —Ç–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ
    audio_data = indata.astype(np.float32)
    audio_data = librosa.util.normalize(audio_data)
    audio_queue.put(audio_data)


def listen_and_predict():
    def run():
        try:
            genre_label.config(text="üé§ –ó–∞–ø–∏—Å...")
            audio_data = []
            start_time = time.time()

            # –û–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Å—É
            with sd.InputStream(samplerate=SR,
                                channels=1,
                                dtype=np.float32,
                                blocksize=2048,
                                callback=callback):
                while True:
                    try:
                        data = audio_queue.get(timeout=1.0)
                        audio_data.append(data)
                        elapsed_time = time.time() - start_time
                        if elapsed_time >= 30:  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–æ 5 —Å–µ–∫—É–Ω–¥
                            break
                    except queue.Empty:
                        continue

            if audio_data:
                genre_label.config(text="‚è≥ –û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ...")
                root.update()
                # –û–±'—î–¥–Ω—É—î–º–æ —Ç–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ
                audio_data = np.concatenate(audio_data, axis=0)
                audio_data = librosa.util.normalize(audio_data.flatten())
                predict_genre(audio_data)
            else:
                genre_label.config(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∞—É–¥—ñ–æ")

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∞—É–¥—ñ–æ: {str(e)}")
            genre_label.config(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∞—É–¥—ñ–æ")

    Thread(target=run, daemon=True).start()


# –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å
root = tk.Tk()
root.title("–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∂–∞–Ω—Ä—É –∞—É–¥—ñ–æ")
root.geometry("415x385")

# –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–∫–Ω–∞
root.configure(bg='#f0f0f0')  # –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π —Ñ–æ–Ω

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
header_label = tk.Label(
    root,
    text="üéµ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∂–∞–Ω—Ä—É –º—É–∑–∏–∫–∏",
    font=("Arial", 16, "bold"),
    bg='#f0f0f0',
    pady=10
)
header_label.pack()

# –ü—ñ–¥–∫–∞–∑–∫–∞
tk.Label(
    root,
    text="–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –∞—É–¥—ñ–æ:",
    font=("Arial", 12),
    bg='#f0f0f0'
).pack(pady=5)

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
button_frame = tk.Frame(root, bg='#f0f0f0')
button_frame.pack(pady=10)

# –ö–Ω–æ–ø–∫–∏
btn_file = tk.Button(
    button_frame,
    text="üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—É–¥—ñ–æ",
    command=choose_file,
    font=("Arial", 11),
    bg='#4CAF50',  # –ó–µ–ª–µ–Ω–∏–π
    fg='white',
    padx=20,
    pady=5
)
btn_file.pack(pady=5)

btn_mic = tk.Button(
    button_frame,
    text="üé§ –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∑ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞",
    command=listen_and_predict,
    font=("Arial", 11),
    bg='#2196F3',  # –°–∏–Ω—ñ–π
    fg='white',
    padx=20,
    pady=5
)
btn_mic.pack(pady=5)

# –ú—ñ—Ç–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
genre_label = tk.Label(
    root,
    text="",
    font=("Arial", 14, "bold"),
    fg="#333333",
    bg='#f0f0f0'
)
genre_label.pack(pady=20)

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –º—ñ—Ç–∫–∞
info_label = tk.Label(
    root,
    text="–ó–∞–ø–∏—Å —Ç—Ä–∏–≤–∞—î 5 —Å–µ–∫—É–Ω–¥\n–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏: WAV, MP3, FLAC",
    font=("Arial", 10),
    fg="#666666",
    bg='#f0f0f0'
)
info_label.pack(pady=10)

root.mainloop()